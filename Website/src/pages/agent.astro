---
import DefaultLayout from '../layouts/DefaultLayout.astro'
---

<script is:inline>

function checkImage(url) {
  var image = new Image();
  image.onload = function() {
    if (this.width > 0) {
      console.log("image exists");
    }
  }
  image.onerror = function() {
    console.log("image doesn't exist");
  }
  image.src = url;
}
let image, character, source, introduction, advancedOptions;
// Retrieve the encoded data from the query parameter
const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
const encodedData = urlParams.get('data');
function formatTextRandomNewLines(text, minSentences = 2, maxSentences = 4) {
  // Split the text into sentences based on ".", "!", or "?"
  const sentences = text.split(/(?<=[.!?])\s/);
  

  // Add a newline character after a random number of sentences
  for (let i = minSentences - 1; i < sentences.length; i += Math.floor(Math.random() * (maxSentences - minSentences + 1)) + minSentences) {
    sentences[i] += '<br>';
  }

  // Join the sentences into formatted text
  const formattedText = sentences.join(' ');

  return formattedText;
}

if (encodedData) {
  // Decode the Base64 string to get the original data
  const jsonData = atob(encodedData);
  const userData = JSON.parse(jsonData);
  console.log("Retrieved Data", userData);
  image = userData.image.toString();
  character = userData.character;
  character = character.replace(/\b\w/g, (match) => match.charAt(0).toUpperCase() + match.slice(1).toLowerCase());
  source = userData.source;
  source = source.replace(/\b\w/g, (match) => match.charAt(0).toUpperCase() + match.slice(1).toLowerCase());
  checkImage(image);
  introduction = userData.introduction;
  advancedOptions = userData.advancedOptions ? userData.advancedOptions : false;

  introduction = formatTextRandomNewLines(introduction);
  console.log(introduction)
  // Now you can use userData in your next page as needed
  } else {
  console.log("No data found in the URL");
  }


function handleKeyDown(event) {
  
  if (event.key === 'Enter' && !event.shiftKey) {
    console.log("Enter Pressed")
      sendMessage();
  }
}
function handleKeyDownModal(event) {
  
  if (event.key === 'Enter' && !event.shiftKey) {
  
      sendMessageModal();
  }
}


  
  function appendUserMessage(message) {
    var chatHistories = document.getElementsByClassName('chat-histories');
    const messageContainer = document.createElement('div');
    messageContainer.className = 'tailwind-chat-bubble-user';
    messageContainer.innerHTML = `
      <div class="flex items-start gap-2.5 justify-end">
        <div class="flex flex-col gap-1  max-w-[320px]">
          <div class="flex items-center space-x-2 rtl:space-x-reverse">
            <span class="text-sm font-semibold text-gray-900 dark:text-white" style="margin-left: 50%;">You</span>
          </div>
          <div class="flex flex-col user-message leading-1.5 p-2  border-gray-200 bg-blue-500 rounded-s-xl rounded-se-xl dark:bg-gray-700" style="word-break: break-word; min-width: auto; margin-left: 60px;">
            <p class="text-sm font-normal text-white dark:text-white">${message}</p>
          </div>
          <span class="text-sm font-normal text-gray-500 dark:text-gray-400" style="margin-left: 30px;">Delivered</span>
        </div>
        <img class="w-11 h-11 object-cover object-center rounded-full" style="margin-top: auto" src="https://d29fhpw069ctt2.cloudfront.net/icon/image/84587/preview.svg" alt="You">
      </div>
    `;
    for (var i = 0; i < chatHistories.length; i++) {
      const chatHistory = chatHistories[i];
      chatHistory.appendChild(messageContainer.cloneNode(true));
      chatHistory.scrollTop = chatHistory.scrollHeight;
    }
  }

  function appendBotMessage(message) {

  var chatHistories = document.getElementsByClassName('chat-histories');
  const messageContainer = document.createElement('div');
  messageContainer.className = 'tailwind-chat-bubble-bot';
  messageContainer.innerHTML = `
  <div class="flex items-start gap-2.5">
   <img class="w-10 h-10 rounded-full" src="${image}" alt="${character}">
   <div class="flex flex-col gap-1 w-full max-w-[320px]">
    <div class="flex items-center space-x-2 rtl:space-x-reverse">
      <span class="text-sm font-semibold text-gray-900 dark:text-white">${character}</span>
      <span class="text-sm font-normal text-gray-500 dark:text-gray-400">${source}</span>
      </div>
      <div class="flex flex-col leading-1.5 bot-message p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl dark:bg-gray-700">
         <p class="text-sm font-normal text-gray-900 dark:text-white"> ${message}</p>
      </div>
      <span class="text-sm font-normal text-gray-500 dark:text-gray-400">Received</span>
   </div>
  </div>
  `;
  for (var i = 0; i < chatHistories.length; i++) {
      const chatHistory = chatHistories[i];
      chatHistory.appendChild(messageContainer.cloneNode(true));
      chatHistory.scrollTop = chatHistory.scrollHeight;
    }

  }
  async function sendMessage() {
  const userInput = document.getElementById('user-input').value;
  if (!userInput.trim()) return;

  appendUserMessage(userInput);

  try {
    // Simulate a delay for the "sent" animation
    const spinner = document.getElementById('spinner');
    spinner.classList.toggle('hidden', false);
    document.getElementById('buttonText').innerHTML = ' Sending...';
    document.getElementById('send-button').classList.add('cursor-not-allowed', 'opacity-50');
    let prompt = userInput;

    let preData = {
      prompt, character, source
    }
    if(advancedOptions) {
      preData = {
        prompt, character, source, advancedOptions
      }
    }
    setTimeout(async () => {
      const jsonData = JSON.stringify(preData);
      const data = await fetch("https://personalityai.onrender.com/chat", {
        method: "POST", headers: {
          'Content-Type': 'application/json',
        },
        body: jsonData
      });
      const botMessage = await data.text();
      appendBotMessage(botMessage);
      document.getElementById('send-button').classList.remove('cursor-not-allowed', 'opacity-50');
      document.getElementById('buttonText').innerHTML = 'Send';
  spinner.classList.toggle('hidden', true);
    }, 2000);

  } catch (error) {
  console.error('Error:', error.message);
  document.getElementById('buttonText').innerHTML = 'Send';
  spinner.classList.toggle('hidden', true);
  }
  document.getElementById('user-input').value = '';
  }
  async function sendMessageModal() {
    const isModal = true;
    const userInput = isModal ? document.getElementById('user-input-modal').value : document.getElementById('user-input').value;
    if (!userInput.trim()) return;

    appendUserMessage(userInput);
      const spinner = isModal ? document.getElementById('spinner-modal') : document.getElementById('spinner');
      spinner.classList.toggle('hidden', false);
      const buttonText = isModal ? document.getElementById('buttonText'): document.getElementById('buttonTextModal');
      buttonText.innerHTML = ' Sending...';
      const sendButton = isModal ? document.getElementById('send-button-modal') : document.getElementById('send-button');
      sendButton.classList.add('cursor-not-allowed', 'opacity-50');
 
    try {
      // Simulate a delay for the "sent" animation
           
      let prompt = userInput;

      const preData = {
        prompt, character, source
      }
      setTimeout(async () => {
        const jsonData = JSON.stringify(preData);
        const data = await fetch("https://personalityai.onrender.com/chat", {
          method: "POST", headers: {
            'Content-Type': 'application/json',
          },
          body: jsonData
        });
        const botMessage = await data.text();
        appendBotMessage(botMessage);
        
       
      
      }, 2000);
      buttonText.innerHTML = 'Send';
      sendButton.classList.remove('cursor-not-allowed', 'opacity-50');
      spinner.classList.toggle('hidden', true);
      document.getElementById('user-input-modal').value = "";

    } catch (error) {
      console.error('Error:', error.message);
      buttonText.innerHTML = 'Send';
      sendButton.classList.remove('cursor-not-allowed', 'opacity-50');
      spinner.classList.toggle('hidden', true);
      document.getElementById('user-input-modal').value = "";
  }
}


  document.addEventListener('DOMContentLoaded', function () {
    // Code inside the function body
  
 
  // document.getElementById('characterImage').src = image;
  // document.getElementById('charactername').innerHTML = character;
  document.getElementById('charactername2').innerHTML = character;
  document.getElementById('characterintro').innerHTML = introduction;
  document.getElementById('charactersource').innerHTML = source;
  var cNameElements = document.getElementsByClassName("characterNameClass");
  var cImageElements = document.getElementsByClassName("characterImageClass");
  for (var i = 0; i < cNameElements.length; i++) {
    cNameElements[i].innerHTML = character;
  };
  for (var i = 0; i < cImageElements.length; i++) {
    cImageElements[i].src = image;
  };
 
  });


  </script>

  <DefaultLayout  title="Character">
    <!-- Character Card -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="container characterhead py-8 " id = "characterheads">
      <a class="flex character-card flex-col items-center  border border-gray-200 rounded-lg md:flex-row md:max-w-xl dark:border-gray-700 bg-white dark:bg-gray-800">
        <img id="charimg" class="characterImageClass object-cover w-full rounded-t-lg h-96 md:h-fill md:w-48 md:rounded-none md:rounded-s-lg" src="" alt="">
        <div class="flex flex-col justify-between p-4">
          <h5 id="charactername2" class="characterNameClass text-2xl font-bold text-gray-900 dark:text-white">
            <span class="font-serif">Character</span> </h5>
          
          <p id="characterintro" class="mb-3 font-cursive text-gray-700 dark:text-gray-400">
            Description placeholder </p>
          
          <p id="charactersource" class="text-sm text-gray-500 dark:text-gray-300">
            Source: Your Source Here
          </p>        
        </div>
      </a>
    </div>
    <!-- Chat box -->
    <div class="container dark:border-gray-700 border-gray-200 chathead md:col-span-1">
      <div id="chat-container" class = "dark:border-gray-700 border-gray-200 dark:bg-gray-800 py-8">
      
        <div id="card-head">
          <div class="user-avatar"></div>
          <img id="characterImage" class="characterImageClass w-10 h-10 rounded-full mb-2" src="" alt="Image">
          <h5 id="charactername" class="characterNameClass mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Noteworthy technology acquisitions 2021</h5>
          <!-- <button data-modal-target="extralarge-modal" data-modal-toggle="extralarge-modal" class="block w-full md:w-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
            Extra large modal
            </button> -->
          <button id="maximize-button" data-tooltip-target="tooltip-maximize" data-modal-target="extralarge-modal" data-modal-toggle="extralarge-modal" class="maximize-button text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
            <svg class="w-5 h-5 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 18">
              <path d="M17 0h-5.768a1 1 0 1 0 0 2h3.354L8.4 8.182A1.003 1.003 0 1 0 9.818 9.6L16 3.414v3.354a1 1 0 0 0 2 0V1a1 1 0 0 0-1-1Z"/>
              <path d="m14.258 7.985-3.025 3.025A3 3 0 1 1 6.99 6.768l3.026-3.026A3.01 3.01 0 0 1 8.411 2H2.167A2.169 2.169 0 0 0 0 4.167v11.666A2.169 2.169 0 0 0 2.167 18h11.666A2.169 2.169 0 0 0 16 15.833V9.589a3.011 3.011 0 0 1-1.742-1.604Z"/>
          </svg>
          <div id="tooltip-maximize" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
            Open Expanded Chatbox            <div class="tooltip-arrow" data-popper-arrow></div>
        </button>
          
          <br>
        </div>
        <div id="chat-history" class="chat-histories max-h-96 overflow-y-auto p-4 bg-white dark:bg-gray-800 dark:border-gray-700 border-gray-200">
          <!-- Add your chat history content here -->
          <!-- You can dynamically append new messages to this container -->
        </div>
        <div id="user-input-container">
          
          <textarea rows="1"  class= "mb-3 font-normal dark:border-gray-700 bg-white dark:bg-gray-800 border-gray-200  text-gray-700 dark:text-gray-400" id="user-input" placeholder="Type a message..." onkeydown="handleKeyDown(event)"></textarea>
          <button id="send-button" type="button" onclick="sendMessage()" class="sendButtonClass text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">
            
            <i class="fa fa-spinner fa-spin hidden" id = "spinner" ></i> 
          <span id="buttonText" class = "buttonTextClass"> Send</span></button>
      
      </div>
    </div>
    <!-- Modal -->
    
    <!-- Extra Large Modal -->
<div id="extralarge-modal" tabindex="-1" class="backdrop-blur-md fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
  <div class="relative w-full max-w-7xl max-h-full">
      <!-- Modal content -->
      <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
          <!-- Modal header -->
          <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
              <h3 class="text-xl font-medium text-gray-900 dark:text-white">
                <!-- Characer Profile top -->
                <img id ="charcterImageModal" class="characterImageClass w-10 h-10 rounded-full mb-2" src="" alt="Image" style="margin-right: 15px;">
                <h5 class="characterNameClass mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Noteworthy technology acquisitions 2021</h5>
              </h3>
              <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="extralarge-modal">
                <i class="fa-solid fa-xmark"></i>
                  <span class="sr-only">Close modal</span>
              </button>
          </div>
          <!-- Modal body -->
          <div class="p-4 md:p-5 space-y-4" style="height: 450px;">
            <div id="chat-history-modal" class="chat-histories max-h-96 overflow-y-auto p-4 bg-white dark:bg-gray-800 dark:border-gray-700 border-gray-200">
              <!-- Add your chat history content here -->
              <!-- You can dynamically append new messages to this container -->
            </div>
              
          </div>
          <!-- Modal footer -->
          <div class="flex items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse border-t border-gray-200 rounded-b dark:border-gray-600">
            <label for="message" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your message:</label>
            <textarea id="user-input-modal" rows="2" onkeydown="handleKeyDownModal(event)" class="sendTextClass block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Write your thoughts here..."></textarea>

             <button id="send-button-modal" type="button" onclick = "sendMessageModal()" class="sendButtonClass text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">
             
              <i class="fa fa-spinner fa-spin hidden" id = "spinner-modal" ></i>
              <span id="buttonTextModal" class="buttonTextClass"> Send</span></button>
            </div>
      </div>

  </div>
</div>
  </div>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300&display=swap" rel="stylesheet">  
  <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300&display=swap" rel="stylesheet"> 
</DefaultLayout>

  <style>
  body a:not(.button) {
  text-decoration: none !important;
  }


  .character-card {

  margin-left: 100%;
  max-height: 100%;
  width: auto;
  margin: 0 auto; /* Center the card */
  position: relative;
  overflow: hidden; /* Add overflow property */
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  object-fit: cover;
 
  }
  .character-card .characterImageClass {
    background-size: cover;
   background-repeat: no-repeat;
   background-position: center center;
   object-fit: cover;
   
  }
.characterNameClass {
  font-family: 'Comfortaa', sans-serif;
 
}
  #chat-container {
  width: 100%; /* Use a percentage-based width */
  max-width: none; /* Remove max-width for responsiveness */
  height: 385px; /* Set a fixed height */
  

  border-radius: 10px;  
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  display: flex;

  flex-direction: column;
  margin: 0 auto; /* Center the container */
  overflow: hidden; /* Add overflow property */
  padding-bottom: 0%;
  padding-top: 0%;
  }
  #characterImage{
    margin-left:-30px;
    margin-right:4%;
    
  }
  #charactername2 {
   
    padding-bottom: 15%;

  }
  #charactersource {
    padding-top: 20%;
  }

  #characterintro {
    font-family: 'Patrick Hand', cursive;
  }

  .container {
  width: 220%;
  max-width: 500px;
  margin: 0 auto; /* Center the container */
  overflow: hidden; /* Add overflow property */
  margin-right: -13rem; /* Adjust the negative margin as needed */

  }

  #chat-history {

  overflow-y: auto;
  padding: 5px;
  /* background-color: #fff; */
  flex: 1;
  }
  #chat-history-modal {

overflow-y: auto;
padding: 5px;
/* background-color: #fff; */
flex: 1;
}

  #user-input {
  flex: 1;
  padding: 10px;

  outline: none;
  margin-right: 10px;
  border-radius: 5px;

  }
  


  #user-input-container {
  display: flex;
  align-items: center;
  padding: 10px;
  border-top: 1px solid #374151;


  box-sizing: border-box;
  padding-left: 10%;
  }
  #card-head {
  display: flex;
  align-items: center;
  padding: 2px;
  padding-top: 9px;
  border-bottom: 1px solid #374151;
  box-sizing: border-box;
  padding-left: 10%;
  }


  .typing {
  align-items: center;
  display: flex;
  height: 17px;
  }
  .typing .dot {
  animation: mercuryTypingAnimation 1.8s infinite ease-in-out;
  background-color: #6CAD96 ;
  border-radius: 50%;
  height: 7px;
  margin-right: 4px;
  vertical-align: middle;
  width: 7px;
  display: inline-block;
  }
  .typing .dot:nth-child(1) {
  animation-delay: 200ms;
  }
  .typing .dot:nth-child(2) {
  animation-delay: 300ms;
  }
  .typing .dot:nth-child(3) {
  animation-delay: 400ms;
  }
  .typing .dot:last-child {
  margin-right: 0;
  }

  @keyframes mercuryTypingAnimation {
  0% {
    transform: translateY(0px);
    background-color:#6CAD96;
  }
  28% {
    transform: translateY(-7px);
    background-color:#9ECAB9;
  }
  44% {
    transform: translateY(0px);
    background-color: #B5D9CB;
  }
  }
  #maximize-button {
    padding: 4px;
    margin-top: -4%;
	margin-bottom: 4%;
  margin-right: -2%;
  top: 10px;
  right: 10px;
  cursor: pointer;
  margin-left: 50%;
  color: #000; /* Change the color as needed */
}



  @media (max-width: 768px) {
  /* Adjust styles for smaller screens if needed */
  .character-card,
  #chat-container,
  .container {
    width: 100%;
    max-width: none;
    margin: 0;
  }
  .user-message {
    margin-left: 0; /* Align to the left on smaller screens */
  }
  }



  #chat-container.maximized {
  width: 100%;
  height: 500; /* Adjusted height */
  border-radius: 0;
}






  .user-message {
  background-color: #73f150;
  padding: 2px;
  border-radius: 8px;
  position: relative;
  margin-left: auto; /* Adjusted to "auto" to move to the right */
  }
  .bot-message {
  background-color: #d4e6ff;
  padding: 8px;
  border-radius: 8px;
  position: relative;
  }
  .bot-message .p-4 {
  padding: 0.5rem;
  }
  .user-message {
  padding: 0.5rem;
  }

  @media (max-width: 768px) {
  /* Adjust styles for smaller screens if needed */
  .container-card,
  #chat-container,
  #characterheads,
  .container {
    width: 100%;
    max-width: none;
    margin: 0;
  }

  .user-message {
    margin-left: 0; /* Align to the left on smaller screens */
  }
  }
  </style>
